name: main
on:
  workflow_dispatch:
    inputs:
      releaseEnv:
        type: choice
        description: 'What Env to release'
        required: true
        default: prod
        options:
          - dev
          - test
          - staging
          - prod
      version:
        required: true
  workflow_call:
    inputs:
      releaseEnv:
        type: string
        description: 'What Env to release'
        required: true
      version:
        type: string
        required: true
  pull_request:
    types:
      - closed
jobs:
  get-env:
    name: Get environment # for pull_request events will prod as default env, otherwise is using the input
    runs-on: ubuntu-latest
    env:
      releaseEnv: ${{ inputs.releaseEnv }}
      version: ${{ inputs.version }}
    outputs:
      releaseEnv: ${{ steps.get.outputs.releaseEnv }}
      version: ${{ steps.get.outputs.version }}
    steps:
      - name: Setup env
        id: get
        working-directory: .
        shell: bash
        run: |
          if [ -z "${releaseEnv}" ]; then
            releaseEnv=prod
            echo "$releaseEnv"
          else
            env=$releaseEnv
            echo "$releaseEnv"
            echo ${{ github.event.pull_request.merged }}
          fi
          if [ -z "${version}" ]; then
            version=$(echo ${GITHUB_SHA} | cut -c1-8)
          else
            echo "Version ${version}"
          fi
          echo "releaseEnv=$releaseEnv" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
  Build:
    name: "Building ${{ needs.get-env.outputs.version }}"
    if: |
      github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: [get-env]
    steps:
      - name: Deploy
        run: echo "Triggering build with version ${{ needs.get-env.outputs.version }}"
  Deploy_dev:
    name: "Dev deploy ${{ needs.get-env.outputs.version }} "
    environment: dev
    needs: [get-env, Build]
    if: |      
        needs.get-env.outputs.releaseEnv == 'dev' || 
        needs.Build.result == 'skipped'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        run: echo Deploying to dev
  Deploy_test:
    name: "Test deploy ${{ needs.get-env.outputs.version }}"
    environment: test
    needs: [get-env, Build]
    if: |
        always() &&
        !contains(needs.*.result, 'failure') &&
        !contains(needs.*.result, 'cancelled') &&
        (
          github.event.pull_request.merged == true ||
          (
            needs.get-env.outputs.releaseEnv == 'test' ||
            needs.get-env.outputs.releaseEnv == 'prod' ||
            needs.get-env.outputs.releaseEnv == 'staging'
          )
        )

    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        run: echo Deploying to test
  Deploy_staging:
    name: "Staging Deploy ${{  needs.get-env.outputs.version }}"
    environment: staging
    if: |
        always() &&
        !contains(needs.*.result, 'failure') &&
        !contains(needs.*.result, 'cancelled') &&
        (
          github.event.pull_request.merged == true ||
          (
            needs.get-env.outputs.releaseEnv == 'staging' ||
            needs.get-env.outputs.releaseEnv == 'prod'
          )
        )
        
    needs: [Deploy_test, get-env]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        run: echo Deploying to Staging
  Deploy_prod:
    name: "Prod Deploy ${{ needs.get-env.outputs.version }}"
    environment: prod
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      (
        github.event.pull_request.merged == true || 
        needs.get-env.outputs.releaseEnv == 'prod'
      )
    runs-on: ubuntu-latest
    needs: [Deploy_staging, Deploy_test, get-env]
    steps:
      - name: Deploy
        run: echo Deploying to prod
